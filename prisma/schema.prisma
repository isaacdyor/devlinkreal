generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  FRONTEND
  BACKEND
  FULLSTACK
  DESIGN
}

model Profile {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  role      RoleType
  skills    String[]
  bio       String
  github    String?
  linkedin  String?
  website   String?
  profilePic String? @map("profile_pic")

  pitchedProjects Project[] @relation("pitched_projects") 
  collaboratedProjects Project[] @relation("collaborated_projects")
  
  comments Comment[] 

  @@map("profile")
}

enum ProjectStatusType {
  PLANNING
  BUILDING
  COMPLETED
}

model Project {
  id        String   @id @db.Uuid @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title      String
  description String
  repo      String?
  status    ProjectStatusType
  image     String?
  stack String[]

  skillsNeeded String[] @map("skills_needed")
  skillsProvided String[] @map("skills_provided")

  profileId String @map("profile_id") @db.Uuid
  creator   Profile     @relation("pitched_projects", fields: [profileId], references: [id])

  collaborators Profile[] @relation("collaborated_projects")

  comments Comment[]

  @@map("project")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String

  profileId String  @map("profile_id") @db.Uuid
  author   Profile     @relation(fields: [profileId], references: [id])

  projectId String @map("project_id") @db.Uuid
  project   Project  @relation(fields: [projectId], references: [id])

  @@map("comment")
}